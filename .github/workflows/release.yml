name: Release

# Trigger the workflow when a release is created
on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Windows x86_64 (native)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
            artifact_name: myapp-windows-x64.exe

          # macOS x86_64 (native)
          - os: macos-13
            target: x86_64-apple-darwin
            use_cross: false
            artifact_name: myapp-macos-x64

          # macOS ARM64 (native)
          - os: macos-14
            target: aarch64-apple-darwin
            use_cross: false
            artifact_name: myapp-macos-arm64

          # Linux x86_64 (native)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
            artifact_name: myapp-linux-x64

          # Linux ARM64 (cross-compiled)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
            artifact_name: myapp-linux-arm64

    steps:
      # Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v3

      # Install Perl and NASM on Windows for OpenSSL vendored build
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install -y perl nasm

      # Install Rust toolchain and specify targets
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install `cross` for cross-compilation (Linux ARM64 only)
      - name: Install cross
        if: matrix.use_cross
        shell: bash
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Build the project
      - name: Build
        shell: bash
        run: |
          if ${{ matrix.use_cross }}; then
            cross build --release --target=${{ matrix.target }}
          else
            cargo build --release --target=${{ matrix.target }}
          fi

      # Prepare the binary with a platform-specific name
      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            binary_path="target/${{ matrix.target }}/release/myapp.exe"
          else
            binary_path="target/${{ matrix.target }}/release/myapp"
          fi
          mv "$binary_path" "${{ matrix.artifact_name }}"

      # Upload the binary to the GitHub release
      - name: Upload binary to release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.artifact_name }}
